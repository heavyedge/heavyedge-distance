name: CD

on:
  push:
    branches: [master]
  pull_request:
  release:
    types: [published]

jobs:

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: get repo
        uses: actions/checkout@v3

      - name: Configure macOS
        if: runner.os == 'macOS'
        run: |
          # Get macOS version
          OS_VERSION=$(sw_vers -productVersion)
          echo "macOS version: $OS_VERSION"
          
          # Remove existing libomp if any
          brew uninstall --ignore-dependencies libomp || true
          
          # Install specific version based on OS
          if [[ "$OS_VERSION" == 11.* ]]; then
            brew install --formula https://raw.githubusercontent.com/Homebrew/homebrew-core/8bdcd1f4533bde1bbcd0c6c6bd40c4ee26845c89/Formula/libomp.rb
          elif [[ "$OS_VERSION" == 12.* ]]; then
            brew install --formula https://raw.githubusercontent.com/Homebrew/homebrew-core/7e14972f6d52e5e5578da70c0015ddf401c00d9e/Formula/libomp.rb
          else
            brew install libomp
          fi
          
          brew install llvm
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
          echo "CFLAGS=-I$(brew --prefix libomp)/include -Xpreprocessor -fopenmp" >> $GITHUB_ENV
          echo "CXXFLAGS=-I$(brew --prefix libomp)/include -Xpreprocessor -fopenmp" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix libomp)/lib -lomp" >> $GITHUB_ENV
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: |
          pip install --upgrade setuptools packaging
          pip install numpy cython
          python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  twine_check:
    name: Check if dists can be published
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name != 'release'

    steps:
      - name: Download wheels and sdist
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Check with twine
        run: |
          pip install twine
          pip install -U packaging
          twine check dist/* --strict

  publish:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Download wheels and sdist
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        run: |
          pip install twine
          pip install -U packaging
          twine upload dist/* -u __token__ -p ${{ secrets.pypi_token }}